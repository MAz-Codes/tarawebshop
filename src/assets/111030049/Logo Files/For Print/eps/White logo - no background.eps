%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 22.05.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2465 1944
%%HiResBoundingBox: 0 0 2464.0798 1943.0399
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011, 2022 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2464.0798 1943.0399 re
W
q
[0.24 0 0 -0.24 0 1943.0399] cm
q
0 0 10266.666 8095.2319 re
W*
q
[78.57518 0 0 78.569969 2840.7031 -1225.45154] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
19.440001 24.66 m
19.26 25.32 19.08 26.16 18.9 27.119999 c
24.48 26.759998 30.18 26.579998 35.34 26.4 c
47.940002 25.92 52.380001 26.16 53.52 25.74 c
54.66 25.379999 54.600002 25.860001 54.18 26.280001 c
53.939999 26.58 52.920002 27.360001 51.959999 27.360001 c
51.059998 27.42 42.599998 27.42 35.040001 27.720001 c
28.800001 27.960001 23.34 28.200001 18.6 28.560001 c
17.82 32.280003 16.800001 37.800003 15.84 45.360001 c
14.4 56.279999 11.58 72.959999 11.34 74.940002 c
11.16 76.920006 9.780001 79.020004 9.780001 77.459999 c
9.780001 75.899994 10.860001 67.440002 14.280001 45.599998 c
15.540001 37.439999 16.560001 32.099998 17.34 28.619999 c
13.5 28.919998 10.14 29.219999 7.440001 29.639999 c
0.12 30.779999 -5.7 32.220001 -5.94 33.66 c
-6.119999 34.68 -6.78 34.560001 -7.079999 33.900002 c
-7.5 32.760002 -7.02 31.560001 2.880001 29.220001 c
7.260001 28.200001 12.360001 27.6 17.640001 27.240002 c
18.720001 22.740002 19.380001 22.080002 19.860001 21.600002 c
20.76 20.760002 21.540001 21.780003 20.880001 22.200003 c
20.160002 22.620003 19.800001 23.160004 19.440001 24.660004 c
19.440001 24.66 l
h
f
Q
q
[66.555893 0 0 66.551483 367.07513 4945.8677] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
7.68 40 m
7.32 40 7.08 38.84 7.4 38.799999 c
10.12 38.48 11.959999 37.880001 11.959999 35.720001 c
11.959999 15.68 l
11.959999 14.72 11.639999 14.400001 10.679999 14.400001 c
9.4 14.400001 l
5.36 14.400001 3.56 15.080001 2.639999 17 c
2.279999 17.719999 1.079999 17.6 1.199999 17 c
1.519999 15.440001 1.839999 14.36 2.079999 12.32 c
2.159999 11.639999 2.639999 11.679999 3.32 11.759999 c
4.839999 11.919999 6.839999 11.999999 14.24 11.999999 c
21.639999 11.999999 24.599998 11.919999 26.119999 11.759999 c
26.839998 11.679999 27.519999 11.639999 27.279999 12.32 c
26.719999 14.16 26.32 15.48 26.079998 17 c
25.959997 17.68 24.959997 17.639999 24.839998 17 c
24.439999 15.12 22.799999 14.4 19.239998 14.4 c
17.799997 14.4 l
16.839996 14.4 16.279997 14.719999 16.279997 15.679999 c
16.279997 35.720001 l
16.279997 37.880001 18.159996 38.48 20.839996 38.800003 c
21.159996 38.840004 20.919996 40.000004 20.559996 40.000004 c
7.679995 40.000004 l
7.68 40 l
h
65.813004 38.720001 m
66.373001 38.800003 66.213005 40 65.733002 40 c
55.773003 40 l
55.253002 40 55.173004 38.799999 55.653004 38.720001 c
57.173004 38.48 58.693005 37.880001 57.213005 34.400002 c
56.613007 33 l
56.253006 32.080002 55.373005 32.040001 54.093006 32.040001 c
45.773006 32.040001 l
44.573006 32.040001 43.693008 32.080002 43.333008 33 c
42.773006 34.400002 l
41.293007 37.960003 42.813007 38.440002 44.813007 38.720001 c
45.293007 38.800003 45.213009 40 44.693008 40 c
36.25301 40 l
35.733009 40 35.61301 38.799999 36.133011 38.720001 c
37.813011 38.48 38.77301 37.84 40.25301 34.400002 c
47.013008 19.000002 l
48.573009 15.480001 49.053009 13.720001 49.053009 12.200002 c
49.053009 11.960002 51.893009 11.320002 52.013008 11.600001 c
61.77301 34.360001 l
63.25301 37.84 64.213013 38.48 65.813011 38.720001 c
65.813004 38.720001 l
h
54.092999 30 m
54.692997 30 55.372997 29.92 55.132999 29.4 c
50.013 17.24 l
44.893002 29.4 l
44.653 29.92 45.293003 30 45.893002 30 c
54.093002 30 l
54.092999 30 l
h
103.545998 39.080002 m
103.865997 39.080002 103.825996 40.080002 103.545998 40.200001 c
101.306 41.040001 97.986 40.760002 95.785995 37.920002 c
89.545998 29.920002 l
87.865997 27.760002 85.666 27.360003 82.745995 27.320002 c
82.745995 35.160004 l
82.745995 37.960003 84.585991 38.440002 87.265991 38.760002 c
87.54599 38.800003 87.345993 40.000004 87.025993 40.000004 c
75.465996 40.000004 l
75.145996 40.000004 74.905998 38.800003 75.225998 38.760002 c
77.185997 38.480003 78.585999 37.760002 78.585999 35.160004 c
78.585999 17.080004 l
78.585999 14.440003 77.185997 13.680004 75.225998 13.160004 c
74.905998 13.080004 75.105995 11.880004 75.465996 11.920004 c
77.065994 12.120004 78.825996 12.160004 80.025993 12.160004 c
82.705994 12.160004 85.265991 11.920004 87.105995 11.920004 c
92.825996 11.920004 97.025993 14.320004 97.025993 19.320004 c
97.025993 24.080004 93.065994 26.360004 90.025993 26.560003 c
90.025993 26.760004 l
91.505997 26.760004 92.505997 27.400003 94.185989 29.520004 c
100.345993 37.200005 l
101.465996 38.640003 102.54599 39.080006 103.54599 39.080006 c
103.545998 39.080002 l
h
83.986 25.6 m
89.986 25.6 92.625999 24.560001 92.625999 20.360001 c
92.625999 16 89.746002 13.84 86.066002 13.84 c
83.625999 13.84 82.746002 14.8 82.746002 17.08 c
82.746002 25.6 l
83.986 25.6 l
h
141.679001 38.720001 m
142.238998 38.800003 142.078995 40 141.598999 40 c
131.638992 40 l
131.118988 40 131.038986 38.799999 131.518997 38.720001 c
133.039001 38.48 134.55899 37.880001 133.078995 34.400002 c
132.478989 33 l
132.118988 32.080002 131.238983 32.040001 129.958984 32.040001 c
121.638985 32.040001 l
120.438988 32.040001 119.558983 32.080002 119.198982 33 c
118.638985 34.400002 l
117.158981 37.960003 118.678986 38.440002 120.678986 38.720001 c
121.158989 38.800003 121.078987 40 120.558983 40 c
112.11898 40 l
111.598984 40 111.478981 38.799999 111.998978 38.720001 c
113.678978 38.48 114.638977 37.84 116.11898 34.400002 c
122.878983 19.000002 l
124.43898 15.480001 124.918983 13.720001 124.918983 12.200002 c
124.918983 11.960002 127.758987 11.320002 127.878983 11.600001 c
137.638977 34.360001 l
139.118973 37.84 140.078979 38.48 141.67897 38.720001 c
141.679001 38.720001 l
h
129.959 30 m
130.559006 30 131.238998 29.92 130.998993 29.4 c
125.87899 17.24 l
120.758987 29.4 l
120.51899 29.92 121.158989 30 121.758987 30 c
129.958984 30 l
129.959 30 l
h
f
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
